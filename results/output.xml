<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 4.1.3 (Python 3.8.10 on linux)" generated="20220124 16:58:22.620" rpa="false" schemaversion="2">
<suite id="s1" name="Atest" source="/home/wilton/source-github/robot_integration_api_framework/atest">
<suite id="s1-s1" name="Test File" source="/home/wilton/source-github/robot_integration_api_framework/atest/test_file.robot">
<test id="s1-s1-t1" name="GET an existing user, notice how the schema gets more accurate">
<kw name="GET" library="REST">
<arg>/users/1</arg>
<tag>http</tag>
<doc>*Sends a GET request to the endpoint.*</doc>
<status status="PASS" starttime="20220124 16:58:22.768" endtime="20220124 16:58:22.948"/>
</kw>
<kw name="Output Schema" library="REST">
<arg>response body</arg>
<tag>I/O</tag>
<doc>*Outputs JSON Schema to terminal or a file.*</doc>
<msg timestamp="20220124 16:58:22.950" level="INFO">
{
    "type": "object",
    "properties": {
        "id": {
            "type": "integer",
            "default": 1
        },
        "name": {
            "type": "string",
            "default": "Leanne Graham"
        },
        "username": {
            "type": "string",
            "default": "Bret"
        },
        "email": {
            "type": "string",
            "default": "Sincere@april.biz"
        },
        "address": {
            "type": "object",
            "properties": {
                "street": {
                    "type": "string",
                    "default": "Kulas Light"
                },
                "suite": {
                    "type": "string",
                    "default": "Apt. 556"
                },
                "city": {
                    "type": "string",
                    "default": "Gwenborough"
                },
                "zipcode": {
                    "type": "string",
                    "default": "92998-3874"
                },
                "geo": {
                    "type": "object",
                    "properties": {
                        "lat": {
                            "type": "string",
                            "default": "-37.3159"
                        },
                        "lng": {
                            "type": "string",
                            "default": "81.1496"
                        }
                    },
                    "required": [
                        "lat",
                        "lng"
                    ]
                }
            },
            "required": [
                "city",
                "geo",
                "street",
                "suite",
                "zipcode"
            ]
        },
        "phone": {
            "type": "string",
            "default": "1-770-736-8031 x56442"
        },
        "website": {
            "type": "string",
            "default": "hildegard.org"
        },
        "company": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "default": "Romaguera-Crona"
                },
                "catchPhrase": {
                    "type": "string",
                    "default": "Multi-layered client-server neural-net"
                },
                "bs": {
                    "type": "string",
                    "default": "harness real-time e-markets"
                }
            },
            "required": [
                "bs",
                "catchPhrase",
                "name"
            ]
        }
    },
    "required": [
        "address",
        "company",
        "email",
        "id",
        "name",
        "phone",
        "username",
        "website"
    ]
}</msg>
<status status="PASS" starttime="20220124 16:58:22.949" endtime="20220124 16:58:22.971"/>
</kw>
<kw name="Object" library="REST">
<arg>response body</arg>
<tag>assertions</tag>
<doc>*Asserts the field as JSON object.*</doc>
<status status="PASS" starttime="20220124 16:58:22.971" endtime="20220124 16:58:22.976"/>
</kw>
<kw name="Integer" library="REST">
<arg>response body id</arg>
<arg>1</arg>
<tag>assertions</tag>
<doc>*Asserts the field as JSON integer.*</doc>
<status status="PASS" starttime="20220124 16:58:22.976" endtime="20220124 16:58:22.977"/>
</kw>
<kw name="String" library="REST">
<arg>response body name</arg>
<arg>Leanne Graham</arg>
<tag>assertions</tag>
<doc>*Asserts the field as JSON string.*</doc>
<status status="PASS" starttime="20220124 16:58:22.977" endtime="20220124 16:58:22.978"/>
</kw>
<kw name="Output Schema" library="REST" type="TEARDOWN">
<tag>I/O</tag>
<doc>*Outputs JSON Schema to terminal or a file.*</doc>
<msg timestamp="20220124 16:58:22.979" level="INFO">
{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "GET https://jsonplaceholder.typicode.com/users/1",
    "description": "Atest.Test File: GET an existing user, notice how the schema gets more accurate",
    "default": true,
    "examples": [],
    "type": "object",
    "properties": {
        "request": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "null"
                },
                "query": {
                    "type": "object"
                }
            }
        },
        "response": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "integer",
                            "default": 1,
                            "enum": [
                                1
                            ]
                        },
                        "name": {
                            "type": "string",
                            "default": "Leanne Graham",
                            "enum": [
                                "Leanne Graham"
                            ]
                        },
                        "username": {
                            "type": "string",
                            "default": "Bret"
                        },
                        "email": {
                            "type": "string",
                            "default": "Sincere@april.biz"
                        },
                        "address": {
                            "type": "object",
                            "properties": {
                                "street": {
                                    "type": "string",
                                    "default": "Kulas Light"
                                },
                                "suite": {
                                    "type": "string",
                                    "default": "Apt. 556"
                                },
                                "city": {
                                    "type": "string",
                                    "default": "Gwenborough"
                                },
                                "zipcode": {
                                    "type": "string",
                                    "default": "92998-3874"
                                },
                                "geo": {
                                    "type": "object",
                                    "properties": {
                                        "lat": {
                                            "type": "string",
                                            "default": "-37.3159"
                                        },
                                        "lng": {
                                            "type": "string",
                                            "default": "81.1496"
                                        }
                                    },
                                    "required": [
                                        "lat",
                                        "lng"
                                    ]
                                }
                            },
                            "required": [
                                "city",
                                "geo",
                                "street",
                                "suite",
                                "zipcode"
                            ]
                        },
                        "phone": {
                            "type": "string",
                            "default": "1-770-736-8031 x56442"
                        },
                        "website": {
                            "type": "string",
                            "default": "hildegard.org"
                        },
                        "company": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "default": "Romaguera-Crona"
                                },
                                "catchPhrase": {
                                    "type": "string",
                                    "default": "Multi-layered client-server neural-net"
                                },
                                "bs": {
                                    "type": "string",
                                    "default": "harness real-time e-markets"
                                }
                            },
                            "required": [
                                "bs",
                                "catchPhrase",
                                "name"
                            ]
                        }
                    },
                    "required": [
                        "address",
                        "company",
                        "email",
                        "id",
                        "name",
                        "phone",
                        "username",
                        "website"
                    ],
                    "examples": [
                        {
                            "id": 1,
                            "name": "Leanne Graham",
                            "username": "Bret",
                            "email": "Sincere@april.biz",
                            "address": {
                                "street": "Kulas Light",
                                "suite": "Apt. 556",
                                "city": "Gwenborough",
                                "zipcode": "92998-3874",
                                "geo": {
                                    "lat": "-37.3159",
                                    "lng": "81.1496"
                                }
                            },
                            "phone": "1-770-736-8031 x56442",
                            "website": "hildegard.org",
                            "company": {
                                "name": "Romaguera-Crona",
                                "catchPhrase": "Multi-layered client-server neural-net",
                                "bs": "harness real-time e-markets"
                            }
                        }
                    ]
                }
            }
        }
    }
}</msg>
<status status="PASS" starttime="20220124 16:58:22.978" endtime="20220124 16:58:22.980"/>
</kw>
<status status="PASS" starttime="20220124 16:58:22.768" endtime="20220124 16:58:22.980"/>
</test>
<test id="s1-s1-t2" name="GET existing users, use JSONPath for very short but powerful queries">
<kw name="GET" library="REST">
<arg>/users?_limit=5</arg>
<tag>http</tag>
<doc>*Sends a GET request to the endpoint.*</doc>
<status status="PASS" starttime="20220124 16:58:22.981" endtime="20220124 16:58:23.121"/>
</kw>
<kw name="Array" library="REST">
<arg>response body</arg>
<tag>assertions</tag>
<doc>*Asserts the field as JSON array.*</doc>
<status status="PASS" starttime="20220124 16:58:23.121" endtime="20220124 16:58:23.134"/>
</kw>
<kw name="Integer" library="REST">
<arg>$[0].id</arg>
<arg>1</arg>
<tag>assertions</tag>
<doc>*Asserts the field as JSON integer.*</doc>
<status status="PASS" starttime="20220124 16:58:23.135" endtime="20220124 16:58:23.159"/>
</kw>
<kw name="String" library="REST">
<arg>$[0]..lat</arg>
<arg>-37.3159</arg>
<tag>assertions</tag>
<doc>*Asserts the field as JSON string.*</doc>
<status status="PASS" starttime="20220124 16:58:23.159" endtime="20220124 16:58:23.173"/>
</kw>
<kw name="Integer" library="REST">
<arg>$..id</arg>
<arg>maximum=5</arg>
<tag>assertions</tag>
<doc>*Asserts the field as JSON integer.*</doc>
<status status="PASS" starttime="20220124 16:58:23.173" endtime="20220124 16:58:23.190"/>
</kw>
<kw name="Output" library="REST" type="TEARDOWN">
<arg>$[*].email</arg>
<tag>I/O</tag>
<doc>*Outputs JSON to terminal or a file.*</doc>
<msg timestamp="20220124 16:58:23.201" level="INFO">
[
    "Sincere@april.biz",
    "Shanna@melissa.tv",
    "Nathan@yesenia.net",
    "Julianne.OConner@kory.org",
    "Lucio_Hettinger@annie.ca"
]</msg>
<status status="PASS" starttime="20220124 16:58:23.190" endtime="20220124 16:58:23.202"/>
</kw>
<status status="PASS" starttime="20220124 16:58:22.981" endtime="20220124 16:58:23.202"/>
</test>
<test id="s1-s1-t3" name="POST with valid params to create a new user, can be output to a file">
<kw name="POST" library="REST">
<arg>/users</arg>
<arg>${json}</arg>
<tag>http</tag>
<doc>*Sends a POST request to the endpoint.*</doc>
<status status="PASS" starttime="20220124 16:58:23.202" endtime="20220124 16:58:23.635"/>
</kw>
<kw name="Integer" library="REST">
<arg>response status</arg>
<arg>201</arg>
<tag>assertions</tag>
<doc>*Asserts the field as JSON integer.*</doc>
<status status="PASS" starttime="20220124 16:58:23.635" endtime="20220124 16:58:23.638"/>
</kw>
<kw name="Output" library="REST" type="TEARDOWN">
<arg>response body</arg>
<arg>${OUTPUTDIR}/new_user.demo.json</arg>
<tag>I/O</tag>
<doc>*Outputs JSON to terminal or a file.*</doc>
<msg timestamp="20220124 16:58:23.639" level="INFO">
{
    "id": 11,
    "name": "Gil Alexander"
}</msg>
<status status="PASS" starttime="20220124 16:58:23.638" endtime="20220124 16:58:23.640"/>
</kw>
<status status="PASS" starttime="20220124 16:58:23.202" endtime="20220124 16:58:23.640"/>
</test>
<test id="s1-s1-t4" name="PUT with valid params to update the existing user, values matter here">
<kw name="PUT" library="REST">
<arg>/users/2</arg>
<arg>{ "isCoding": true }</arg>
<tag>http</tag>
<doc>*Sends a PUT request to the endpoint.*</doc>
<status status="PASS" starttime="20220124 16:58:23.642" endtime="20220124 16:58:24.065"/>
</kw>
<kw name="Boolean" library="REST">
<arg>response body isCoding</arg>
<arg>true</arg>
<tag>assertions</tag>
<doc>*Asserts the field as JSON boolean.*</doc>
<status status="PASS" starttime="20220124 16:58:24.066" endtime="20220124 16:58:24.069"/>
</kw>
<kw name="PUT" library="REST">
<arg>/users/2</arg>
<arg>{ "sleep": null }</arg>
<tag>http</tag>
<doc>*Sends a PUT request to the endpoint.*</doc>
<status status="PASS" starttime="20220124 16:58:24.069" endtime="20220124 16:58:24.454"/>
</kw>
<kw name="Null" library="REST">
<arg>response body sleep</arg>
<tag>assertions</tag>
<doc>*Asserts the field as JSON null.*</doc>
<status status="PASS" starttime="20220124 16:58:24.455" endtime="20220124 16:58:24.457"/>
</kw>
<kw name="PUT" library="REST">
<arg>/users/2</arg>
<arg>{ "pockets": "", "money": 0.02 }</arg>
<tag>http</tag>
<doc>*Sends a PUT request to the endpoint.*</doc>
<status status="PASS" starttime="20220124 16:58:24.457" endtime="20220124 16:58:24.854"/>
</kw>
<kw name="String" library="REST">
<arg>response body pockets</arg>
<arg>${EMPTY}</arg>
<tag>assertions</tag>
<doc>*Asserts the field as JSON string.*</doc>
<status status="PASS" starttime="20220124 16:58:24.855" endtime="20220124 16:58:24.858"/>
</kw>
<kw name="Number" library="REST">
<arg>response body money</arg>
<arg>0.02</arg>
<tag>assertions</tag>
<doc>*Asserts the field as JSON number.*</doc>
<status status="PASS" starttime="20220124 16:58:24.859" endtime="20220124 16:58:24.862"/>
</kw>
<kw name="Missing" library="REST">
<arg>response body moving</arg>
<tag>assertions</tag>
<doc>*Asserts the field does not exist.*</doc>
<status status="PASS" starttime="20220124 16:58:24.862" endtime="20220124 16:58:24.862"/>
</kw>
<status status="PASS" starttime="20220124 16:58:23.641" endtime="20220124 16:58:24.863"/>
</test>
<test id="s1-s1-t5" name="PATCH with valid params, reusing response properties as a new payload">
<kw name="GET" library="REST">
<var>&amp;{res}</var>
<arg>/users/3</arg>
<tag>http</tag>
<doc>*Sends a GET request to the endpoint.*</doc>
<msg timestamp="20220124 16:58:25.013" level="INFO">&amp;{res} = { seconds=0.144853 | status=200 | reason=OK | body={'id': 3, 'name': 'Clementine Bauch', 'username': 'Samantha', 'email': 'Nathan@yesenia.net', 'address': {'street': 'Douglas Extension', 'suite': 'Sui...</msg>
<status status="PASS" starttime="20220124 16:58:24.864" endtime="20220124 16:58:25.013"/>
</kw>
<kw name="String" library="REST">
<arg>$.name</arg>
<arg>Clementine Bauch</arg>
<tag>assertions</tag>
<doc>*Asserts the field as JSON string.*</doc>
<status status="PASS" starttime="20220124 16:58:25.014" endtime="20220124 16:58:25.039"/>
</kw>
<kw name="PATCH" library="REST">
<arg>/users/4</arg>
<arg>{ "name": "${res.body['name']}" }</arg>
<tag>http</tag>
<doc>*Sends a PATCH request to the endpoint.*</doc>
<status status="PASS" starttime="20220124 16:58:25.039" endtime="20220124 16:58:25.479"/>
</kw>
<kw name="String" library="REST">
<arg>$.name</arg>
<arg>Clementine Bauch</arg>
<tag>assertions</tag>
<doc>*Asserts the field as JSON string.*</doc>
<status status="PASS" starttime="20220124 16:58:25.480" endtime="20220124 16:58:25.503"/>
</kw>
<kw name="PATCH" library="REST">
<arg>/users/5</arg>
<arg>${dict}</arg>
<tag>http</tag>
<doc>*Sends a PATCH request to the endpoint.*</doc>
<status status="PASS" starttime="20220124 16:58:25.503" endtime="20220124 16:58:25.889"/>
</kw>
<kw name="String" library="REST">
<arg>$.name</arg>
<arg>${dict.name}</arg>
<tag>assertions</tag>
<doc>*Asserts the field as JSON string.*</doc>
<status status="PASS" starttime="20220124 16:58:25.890" endtime="20220124 16:58:25.915"/>
</kw>
<status status="PASS" starttime="20220124 16:58:24.863" endtime="20220124 16:58:25.915"/>
</test>
<test id="s1-s1-t6" name="DELETE the existing successfully, save the history of all requests">
<kw name="DELETE" library="REST">
<arg>/users/6</arg>
<tag>http</tag>
<doc>*Sends a DELETE request to the endpoint.*</doc>
<status status="PASS" starttime="20220124 16:58:25.916" endtime="20220124 16:58:26.299"/>
</kw>
<kw name="Integer" library="REST">
<arg>response status</arg>
<arg>200</arg>
<arg>202</arg>
<arg>204</arg>
<tag>assertions</tag>
<doc>*Asserts the field as JSON integer.*</doc>
<status status="PASS" starttime="20220124 16:58:26.299" endtime="20220124 16:58:26.302"/>
</kw>
<kw name="REST Instances" library="REST">
<arg>${OUTPUTDIR}/all.demo.json</arg>
<tag>I/O</tag>
<doc>*Writes the instances as JSON to a file.*</doc>
<status status="PASS" starttime="20220124 16:58:26.303" endtime="20220124 16:58:26.309"/>
</kw>
<status status="PASS" starttime="20220124 16:58:25.916" endtime="20220124 16:58:26.310"/>
</test>
<doc>Test data can be read from variables and files.
Both JSON and Python type systems are supported for inputs.
Every request creates a so-called instance. Can be `Output`.
Most keywords are effective only for the last instance.
Initial schemas are autogenerated for request and response.
You can make them more detailed by using assertion keywords.
The assertion keywords correspond to the JSON types.
They take in either path to the property or a JSONPath query.
Using (enum) values in tests optional. Only type is required.
All the JSON Schema validation keywords are also supported.
Thus, there is no need to write any own validation logic.
Not a long path from schemas to full Swagger/OpenAPI specs.
The persistence of the created instances is the test suite.
Use keyword `Rest instances` to output the created instances.</doc>
<status status="PASS" starttime="20220124 16:58:22.632" endtime="20220124 16:58:26.311"/>
</suite>
<status status="PASS" starttime="20220124 16:58:22.620" endtime="20220124 16:58:26.314"/>
</suite>
<statistics>
<total>
<stat pass="6" fail="0" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="6" fail="0" skip="0" id="s1" name="Atest">Atest</stat>
<stat pass="6" fail="0" skip="0" id="s1-s1" name="Test File">Atest.Test File</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
